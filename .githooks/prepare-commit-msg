#!/bin/sh
. "$(dirname $0)/_/husky.sh"

#
# Inspects branch name and checks if it contains a Jira ticket number (i.e. ABC-123).
# If yes, commit message will be automatically prepended with [ABC-123].
#
# Useful for looking through git history and relating a commit or group of commits
# back to a user story.
#

# GIT_BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)

# # if in Gitlab CI environment --> Use CI_COMMIT_REF_NAME instead
# if [ -n "$CI_COMMIT_REF_NAME" ]
# then
#     GIT_BRANCH_NAME=$CI_COMMIT_REF_NAME
# fi

# # Ensure BRANCH_NAME is not empty and is not in a detached HEAD state (i.e. rebase).
# # SKIP_PREPARE_COMMIT_MSG may be used as an escape hatch to disable this hook,
# # while still allowing other githooks to run.
# if [ ! -z "$GIT_BRANCH_NAME" ] && [ "$GIT_BRANCH_NAME" != "HEAD" ] && [ "$SKIP_PREPARE_COMMIT_MSG" != 1 ]; then

#   PREFIX_PATTERN='[A-Z]{2,5}-[0-9]{1,4}'

#   [[ $GIT_BRANCH_NAME =~ $PREFIX_PATTERN ]]

#   PREFIX=${BASH_REMATCH[0]}
#   echo PREFIX

#   PREFIX_IN_COMMIT=$(grep -c "\[$PREFIX\]" $1)
#   echo $PREFIX_IN_COMMIT

#   # Ensure PREFIX exists in GIT_BRANCH_NAME and is not already present in the commit message
#   if [[ -n "$PREFIX" ]] && ! [[ $PREFIX_IN_COMMIT -ge 1 ]]; then
#     sed -i.bak -e "1s~^~[$PREFIX] ~" $1
#   fi

# fi
